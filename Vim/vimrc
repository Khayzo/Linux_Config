"----------------------------------------------------------------------
" Author:
"       Thierry CANTENOT
"
" Version: 
"       1.2 - 08/11/2012
"
" Sections:
"       - General
"       - User interface
"       - Colorscheme
"       - Text & Bloc : Indenting, Folding
"       - Moves
"       - Searching
"       - Mapping & Shorcuts
"       - Autocompletion
"       - Syntax
"       - Plugins configuration
"    
"----------------------------------------------------------------------


"----------------------------------------------------------------------
" #General
"----------------------------------------------------------------------
" Pathogen

call pathogen#runtime_append_all_bundles()
call pathogen#helptags()


" Avoid conflict with vi
set nocompatible

" Sets how many lines of history Vim has to remember
set history=700

" Set to auto read when a file is changed from the outside
set autoread

" Remove Vim's startup message
set shortmess+=I

" Set mapleader (shortcut key) to ","
let mapleader = ","
let g:mapleader = ","

" Turn backup off
set nobackup
set nowb
set noswapfile

" Set utf8 as standard encoding and en_US as the standard language
set encoding=utf8

" Use Unix as the standard file type
set ffs=unix,dos,mac


"----------------------------------------------------------------------
" #User interface
"----------------------------------------------------------------------

" Display line numbers
set number

" Show the cursor line
set cursorline

" Scroll page when cursor is x lines away from an edge
set scrolloff=5

" Show the cursor position all the time
set ruler

" Display the current mode
set showmode

" Height of the command bar
set cmdheight=2

" A buffer becomes hidden when it is abandoned
set hidden

" Don't redraw while executing macros (good performance config)
set lazyredraw

" Allow backspacing over everything in insert mode
set backspace=indent,eol,start
set whichwrap+=<,>,h,l

" Show matching brackets/parenthesis
set showmatch
set matchpairs+=<:> "add < > to SHIFT+%


" Display status line
if has('statusline')
    set laststatus=2

    "Broken down into easily includeable segments
    set statusline=%<%f\   " Filename
    set statusline+=%w%h%m%r " Options
    "set statusline+=%{fugitive#statusline()} " Git Hotness
    "set statusline+=\[%{&ff}/%Y]  " Filetype
    "set statusline+=\[%{getcwd()}] " Current dir
    set statusline+=%=%-14.(Line:%l/%L\ [%p%%]\ Col:%v\ [%b][0x%B]%) " Right aligned file nav info
endif

"Remove GVim Toolbar
set guioptions-=T

"----------------------------------------------------------------------
" # Colorscheme
"----------------------------------------------------------------------

" Set color mode to 256
set t_Co=256

" Colorscheme choice
let g:molokai_original = 0
colorscheme molokai


"----------------------------------------------------------------------
" # Text & Bloc : Indenting, Folding
"----------------------------------------------------------------------

" Set font
set guifont=Inconsolata\ 10 "Monospace\ 10 "Inconsolata\ 13

" Activate indenting
filetype indent plugin on

" Replace tabulation with spaces
set  expandtab

" Set tabulation indenting width
"set  tabstop=4
set  shiftwidth=4
set  softtabstop=4

" Indent mode
set autoindent
set smartindent
set wrap


" Function auto-folding
function! FoldFunction()
    let line = getline(v:foldstart)
    let sub = substitute(line,'/\*\|\*/\|^\s+', '', 'g')
    let lines = v:foldend - v:foldstart + 1
    return v:folddashes.sub.'...'.lines.' Lines...'.getline(v:foldend)
endfunction

"set foldenable
set  foldmethod=syntax    "functions and blocs auto-folding
set  foldtext=FoldFunction()    "use FoldFunction (optionnal)


" Fold settings
"set foldmethod=indent

" Max number of fold levels
"set foldnestmax=10

" Folding everything
set nofoldenable

" Folding parent levels
set foldlevel=0

"----------------------------------------------------------------------
" # Moves 
"----------------------------------------------------------------------

"try
    "" Specify the behavior when switching between buffers
    "set switchbuf=useopen,usetab,newtab

    "" Tab display
    "set stal=0
"catch
"endtry

" Switch tabs quickly
nmap <C-S-tab> :tabprevious<cr>
nmap <C-tab> :tabnext<cr>

" Useful mappings for managing tabs
nmap <leader>tn :tabnew<cr>
nmap <leader>to :tabonly<cr>
nmap <leader>tc :tabclose<cr>

" Opens a new tab with the current buffer's path
" Super useful when editing files in the same directory
nmap <leader>te :tabedit <c-r>=expand("%:p:h")<cr>/

" Switch CWD to the directory of the open buffer
nmap <leader>cd :cd %:p:h<cr>:pwd<cr>

" Close buffer without closing window
nmap <silent> <leader>bd :Bclose!<cr>

if has("autocmd")

    " Return to last edit position when opening files
    autocmd BufReadPost *
                \ if line("'\"") > 0 && line("'\"") <= line("$") |
                \   exe "normal! g`\"" |
                \ endif
endif

" Move a line of text using ALT+[jk]
nnoremap <M-j> :m .+1<cr>==
nnoremap <M-k> :m .-2<cr>==
inoremap <M-j> <Esc>:m .+1<cr>==gi
inoremap <M-k> <Esc>:m .-2<cr>==gi
vnoremap <M-j> :m '>+1<cr>gv=gv
vnoremap <M-k> :m '<-2<cr>gv=gv


" Toggle between absolute / relative line numbering
nmap <leader>n :call ToggleRelNumbering()<cr>
vmap <leader>n :call ToggleRelNumbering()<cr>gv


" Show numbering (absolute / relative)
function! ToggleRelNumbering() "{{{
    if &number
        set relativenumber
    else
        set number
    endif
endfunction "}}}


"----------------------------------------------------------------------
" # Searching
"----------------------------------------------------------------------

" Highlight search results
set hlsearch

"Show results while typing
set  incsearch

"Case sensitive
set ignorecase
set smartcase

" Center screen at cursor
nnoremap n nzz
nnoremap N Nzz
nnoremap } }zz

" Disable highlight when <leader><leader> is pressed
nmap <silent> <leader><leader> :noh<cr>

" Find current word in new window
nmap <leader>sw :let @/=expand("<cword>")<bar>split<bar>normal n<cr>
nmap <leader>sW :let @/='\<'.expand("<cword>").'\>'<bar>split<bar>normal n<cr>

" Quick search-replace
nnoremap <leader>sr :%s/\<<C-r><C-w>\>//g<left><left>


"----------------------------------------------------------------------
" # Mapping & Shorcuts
"----------------------------------------------------------------------

" Remap Vim 0 to first non-blank character
nmap 0 ^

" Map ";" to ":" (avoid typos)
noremap ; :

" Map "²" to "~" (quicker), and don't go forward one character
"nmap ² ~h

" Resolve inconsistency between "Y" (line) and "D" (til end of line)
nmap Y y$

" Visual block indenting: keep selection after indenting
vmap > >gv
vmap < <gv

" Fast saving
nnoremap <leader>w :w!<cr>

" Close current file
nmap <leader>q :q<cr>

" Run "ls" in CWD
nmap <leader>ls :!ls<cr>

" Remove the ugly Windows "^M"
nmap <leader>m mmHmt:%s/<C-V><cr>//ge<cr>'tzt'm

" Edit / Source configuration
nmap <leader>co :e $MYVIMRC<cr>
nmap <leader>so :so $MYVIMRC<cr>

" Toggle paste mode on and off
nmap <leader>pp :setlocal paste!<cr>

" Toggle spell-checking
nmap <leader>ss :setlocal spell!<cr>

" Quick make command
map <F8> :wa<cr> :make<cr>

"Show filename
map <leader>sk :call Skeleton()<CR>

"Generate skeleton for Class.[cpp, h, hpp]  files
function! Skeleton()

    let extension = expand('%:e')
    let filename = expand('%:t:r')
    
    if (extension == 'h' || extension == 'hpp')
        silent execute(":r ~/.vim/bundle/Utils/SClasse.h")
        silent execute(":%s/CLASSE/".toupper(filename)."/gI")
    elseif(extension == 'c' || extension == 'cpp')
        silent execute(":r ~/.vim/bundle/Utils/SClasse.cpp")
    endif
    
    " Subtitutions
    silent execute(":%s/__classe/__".tolower(filename)."/gI")
    silent execute(":%s/Classe/".filename."/gI")
    silent :%s/START_DATE/\=strftime("%d\/%m\/%Y")/g
    
    echo "Skeleton generated !" 
    " Simulate gg (go top)
    silent execute("normal gg")
    " Delete the first (blank) line
    silent execute("normal dd")

endfunction

"Tab shortcuts
set showtabline=2
map ² :tabn<CR>
map ~ :tabp<CR>

"Move betwwen splits
map <Tab> <C-W>w
map <S-Tab> <C-W>W
"New right empty vertical split
set splitright
map <C-W>b :vnew<CR> 

"map <leader>v <C-W>v
"map <leader>s <C-W>s
"map <leader>o <C-W>o
"map <leader>c <C-W>c


"----------------------------------------------------------------------
" # Autocompletion
"----------------------------------------------------------------------

" Default completing function
set omnifunc=syntaxcomplete#Complete


" Show menu
set  wildmenu

" Show all possibilities
set  wildmode =list:longest,list:full

" Ignore some filetypes for includes completion
set  wildignore =*.o,*.r,*.so,*.sl,*.tar,*.tgz,*.pyc,*.gch,*~

"Shorcuts
iab #i #include

"Spell checker
"set  spell
"set  spelllang =en,fr
"set  spellsuggest =5


"----------------------------------------------------------------------
" # Syntax
"----------------------------------------------------------------------

if has("autocmd")
  
    "Remove trailing whitespaces and ^M chars
    autocmd FileType c,cpp,java,php,js,python,twig,xml,yml autocmd BufWritePre <buffer> :call setline(1,map(getline(1,"$"),'substitute(v:val,"\\s\\+$","","")'))

   " Makefile
    autocmd FileType make setl noexpandtab

    " C / C++
    autocmd BufNewFile,BufRead,BufEnter *.c setl filetype=c
    autocmd BufNewFile,BufRead,BufEnter *.h,*.cpp,*.hpp setl filetype=cpp

    " JSON / JavaScript
    autocmd BufNewFile,BufRead *.json set filetype=javascript

    " Pascal
    autocmd BufNewFile,BufRead *.pas,*.PAS set filetype=pascal

    " Markdown
    autocmd BufNewFile,BufRead *.md set filetype=markdown

    " Python
    "autocmd BufWritePre *.py :%s/\s\+$//e

    "OPENGL
    autocmd BufNewFile,BufRead *.frag,*.vert,*.fp,*.vp,*.glsl setf glsl
   
endif


"----------------------------------------------------------------------
" # Plugins configuration
"----------------------------------------------------------------------

filetype plugin on

"----------------------------------------------------------------------
"OmniCppComplete


"Configure tags - add additional tags here or comment out not-used ones      
set tags+=~/.vim/tags/stl      
set tags+=~/.vim/tags/gl      
set tags+=~/.vim/tags/sdl      
"set tags+=~/.vim/tags/qt4 
set tags+=~/.vim/tags/sfml
	
"Build tags of your own project with CTRL+F12      
"Map <C-F12> :!ctags -R --c++-kinds=+pl --fields=+iaS --extra=+q .<CR>      
noremap <F12> :!ctags -R --c++-kinds=+pl --fields=+iaS --extra=+q .<cr>      
inoremap <F12> <Esc>:!ctags -R --c++-kinds=+pl --fields=+iaS --extra=+q .<cr>      

"Map <C-Space> for Omnicompletion
inoremap <expr> <C-Space> pumvisible() \|\| &omnifunc == '' ?
            \ "\<lt>C-n>" :
            \ "\<lt>C-x>\<lt>C-o><c-r>=pumvisible() ?" .
            \ "\"\\<lt>c-n>\\<lt>c-p>\\<lt>c-n>\" :" .
            \ "\" \\<lt>bs>\\<lt>C-n>\"\<CR>"
imap <C-@> <C-Space>

" OmniCppComplete      
let OmniCpp_NamespaceSearch = 1      
let OmniCpp_GlobalScopeSearch = 1      
let OmniCpp_ShowAccess = 1      
let OmniCpp_ShowPrototypeInAbbr = 1     "show function parameters
let OmniCpp_MayCompleteDot = 1          "autocomplete after .
let OmniCpp_MayCompleteArrow = 1        "autocomplete after ->
let OmniCpp_MayCompleteScope = 1        "autocomplete after ::
let OmniCpp_DefaultNamespaces = ["std", "_GLIBCXX_STD"]      

" automatically open and close the popup menu / preview window      
au CursorMovedI,InsertLeave * if pumvisible() == 0|silent! pclose|endif      
set completeopt=menuone,menu,longest,preview


"----------------------------------------------------------------------
"SuperTab

"Allow SuperTab to use OmniComplete
let g:SuperTabDefaultCompletionType = "context"


"----------------------------------------------------------------------
" Fugitive

nmap <leader>gs :Gstatus<cr>
nmap <leader>gd :Gdiff<cr>
nmap <leader>gl :Glog<cr>
nmap <leader>gc :Gcommit<cr>
nmap <leader>gw :Gwrite<cr>


"----------------------------------------------------------------------
" NerdTree

map <silent> <F3> :NERDTreeToggle<cr>
imap <silent> <F3> <C-o><F3><cr>



"----------------------------------------------------------------------
" TagBar

let g:tagbar_usearrows = 1
map <leader><Tab> :TagbarToggle<CR>
map <F4> :TagbarToggle<CR>


"----------------------------------------------------------------------
" FSwitch

map <leader>fsh :FSSplitLeft<CR>
map <leader>fsj :FSSplitBelow<CR>
map <leader>fsk :FSSplitAbove<CR>
map <leader>fsl :FSSplitRight<CR>


"----------------------------------------------------------------------
" CommandT

noremap <leader>t :CommandT<CR>
noremap <leader>T <Esc>:CommandTFlush<CR>
noremap <leader>O <Esc>:CommandTBuffer<CR>
